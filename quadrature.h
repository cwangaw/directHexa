#ifndef __quadrature_h_included__
#define __quadrature_h_included__

////////////////////////////////////////////////////////////////////////////////
// Quadrature class
//  Computes quadrature points and weights for an Element
//
//  Uses the Element class
//  Assume base objects: Point, Tensor1, and Tensor2
////////////////////////////////////////////////////////////////////////////////

#include <vector>
#include <cmath>
#include "Mesh/baseObjects.h"
#include "Mesh/hexaMesh.h"

namespace quadrature {

  ////////////////////////////////////////////////////////////////////////////////
  // Quadrature rules on reference right tetrahedron (0,0,0), (1,0,0), (0,1,0), (0,0,1)
  //    num = number of points in the rule
  //    dop = degree of precision of the rule
  //    pts = quadrature points (using Point)
  //    wts = quadrature weights
  ////////////////////////////////////////////////////////////////////////////////

  static struct {
    const int num = 4;
    const int dop = 2;
    Point pts[4] = {  Point(0.5854101966249685, 0.1381966011250105, 0.1381966011250105),
                      Point(0.1381966011250105, 0.1381966011250105, 0.1381966011250105),
                      Point(0.1381966011250105, 0.1381966011250105, 0.5854101966249685),
                      Point(0.1381966011250105, 0.5854101966249685, 0.1381966011250105) };
    double wts[4] = {   0.2500000000000000, 0.2500000000000000, 0.2500000000000000, 0.2500000000000000 };
  } keast1;

  static struct {
    const int num = 5;
    const int dop = 3;
    Point pts[5] = {  Point(0.2500000000000000, 0.2500000000000000, 0.2500000000000000),
                      Point(0.5000000000000000, 0.1666666666666667, 0.1666666666666667),
                      Point(0.1666666666666667, 0.1666666666666667, 0.1666666666666667),
                      Point(0.1666666666666667, 0.1666666666666667, 0.5000000000000000),
                      Point(0.1666666666666667, 0.5000000000000000, 0.1666666666666667) };
    double wts[5] = {    -0.8000000000000000, 0.4500000000000000, 0.4500000000000000,
                          0.4500000000000000, 0.4500000000000000 };
  } keast2;

  static struct {
    const int num = 11;
    const int dop = 4;
    Point pts[11] = { Point(0.2500000000000000, 0.2500000000000000, 0.2500000000000000),
                      Point(0.7857142857142857, 0.0714285714285714, 0.0714285714285714),
                      Point(0.0714285714285714, 0.0714285714285714, 0.0714285714285714),
                      Point(0.0714285714285714, 0.0714285714285714, 0.7857142857142857),
                      Point(0.0714285714285714, 0.7857142857142857, 0.0714285714285714),
                      Point(0.1005964238332008, 0.3994035761667992, 0.3994035761667992),
                      Point(0.3994035761667992, 0.1005964238332008, 0.3994035761667992),
                      Point(0.3994035761667992, 0.3994035761667992, 0.1005964238332008),
                      Point(0.3994035761667992, 0.1005964238332008, 0.1005964238332008),
                      Point(0.1005964238332008, 0.3994035761667992, 0.1005964238332008),
                      Point(0.1005964238332008, 0.1005964238332008, 0.3994035761667992) };
    double wts[11] = {   -0.0789333333333333, 0.0457333333333333, 0.0457333333333333,
                          0.0457333333333333, 0.0457333333333333, 0.1493333333333333,
                          0.1493333333333333, 0.1493333333333333, 0.1493333333333333,
                          0.1493333333333333, 0.1493333333333333 };
  } keast4;

  static struct {
    const int num = 15;
    const int dop = 5;
    Point pts[15] = { Point(0.2500000000000000, 0.2500000000000000, 0.2500000000000000),
                      Point(0.0000000000000000, 0.3333333333333333, 0.3333333333333333),
                      Point(0.3333333333333333, 0.3333333333333333, 0.3333333333333333),
                      Point(0.3333333333333333, 0.3333333333333333, 0.0000000000000000),
                      Point(0.3333333333333333, 0.0000000000000000, 0.3333333333333333),
                      Point(0.7272727272727273, 0.0909090909090909, 0.0909090909090909),
                      Point(0.0909090909090909, 0.0909090909090909, 0.0909090909090909),
                      Point(0.0909090909090909, 0.0909090909090909, 0.7272727272727273),
                      Point(0.0909090909090909, 0.7272727272727273, 0.0909090909090909),
                      Point(0.4334498464263357, 0.0665501535736643, 0.0665501535736643),
                      Point(0.0665501535736643, 0.4334498464263357, 0.0665501535736643),
                      Point(0.0665501535736643, 0.0665501535736643, 0.4334498464263357),
                      Point(0.0665501535736643, 0.4334498464263357, 0.4334498464263357),
                      Point(0.4334498464263357, 0.0665501535736643, 0.4334498464263357),
                      Point(0.4334498464263357, 0.4334498464263357, 0.0665501535736643) };
    double wts[15] = {    0.1817020685825351, 0.0361607142857143, 0.0361607142857143,
                          0.0361607142857143, 0.0361607142857143, 0.0698714945161738,
                          0.0698714945161738, 0.0698714945161738, 0.0698714945161738,
                          0.0656948493683187, 0.0656948493683187, 0.0656948493683187,
                          0.0656948493683187, 0.0656948493683187, 0.0656948493683187 };
  } keast6;

  static struct {
    const int num = 24;
    const int dop = 6;
    Point pts[24] = { Point(0.3561913862225449, 0.2146028712591517, 0.2146028712591517),
                      Point(0.2146028712591517, 0.2146028712591517, 0.2146028712591517),
                      Point(0.2146028712591517, 0.2146028712591517, 0.3561913862225449),
                      Point(0.2146028712591517, 0.3561913862225449, 0.2146028712591517),
                      Point(0.8779781243961660, 0.0406739585346113, 0.0406739585346113),
                      Point(0.0406739585346113, 0.0406739585346113, 0.0406739585346113),
                      Point(0.0406739585346113, 0.0406739585346113, 0.8779781243961660),
                      Point(0.0406739585346113, 0.8779781243961660, 0.0406739585346113),
                      Point(0.0329863295731731, 0.3223378901422757, 0.3223378901422757),
                      Point(0.3223378901422757, 0.3223378901422757, 0.3223378901422757),
                      Point(0.3223378901422757, 0.3223378901422757, 0.0329863295731731),
                      Point(0.3223378901422757, 0.0329863295731731, 0.3223378901422757),
                      Point(0.2696723314583159, 0.0636610018750175, 0.0636610018750175),
                      Point(0.0636610018750175, 0.2696723314583159, 0.0636610018750175),
                      Point(0.0636610018750175, 0.0636610018750175, 0.2696723314583159),
                      Point(0.6030056647916491, 0.0636610018750175, 0.0636610018750175),
                      Point(0.0636610018750175, 0.6030056647916491, 0.0636610018750175),
                      Point(0.0636610018750175, 0.0636610018750175, 0.6030056647916491),
                      Point(0.0636610018750175, 0.2696723314583159, 0.6030056647916491),
                      Point(0.2696723314583159, 0.6030056647916491, 0.0636610018750175),
                      Point(0.6030056647916491, 0.0636610018750175, 0.2696723314583159),
                      Point(0.0636610018750175, 0.6030056647916491, 0.2696723314583159),
                      Point(0.2696723314583159, 0.0636610018750175, 0.6030056647916491),
                      Point(0.6030056647916491, 0.2696723314583159, 0.0636610018750175) };
    double wts[24] = {    0.0399227502581679, 0.0399227502581679, 0.0399227502581679,
                          0.0399227502581679, 0.0100772110553207, 0.0100772110553207,
                          0.0100772110553207, 0.0100772110553207, 0.0553571815436544,
                          0.0553571815436544, 0.0553571815436544, 0.0553571815436544,
                          0.0482142857142857, 0.0482142857142857, 0.0482142857142857,
                          0.0482142857142857, 0.0482142857142857, 0.0482142857142857,
                          0.0482142857142857, 0.0482142857142857, 0.0482142857142857,
                          0.0482142857142857, 0.0482142857142857, 0.0482142857142857 };
  } keast7;

  static struct {
    const int num = 31;
    const int dop = 7;
    Point pts[31] = { Point(0.2500000000000000, 0.2500000000000000, 0.2500000000000000),
                      Point(0.7653604230090441, 0.0782131923303186, 0.0782131923303186),
                      Point(0.0782131923303186, 0.0782131923303186, 0.0782131923303186),
                      Point(0.0782131923303186, 0.0782131923303186, 0.7653604230090441),
                      Point(0.0782131923303186, 0.7653604230090441, 0.0782131923303186),
                      Point(0.6344703500082868, 0.1218432166639044, 0.1218432166639044),
                      Point(0.1218432166639044, 0.1218432166639044, 0.1218432166639044),
                      Point(0.1218432166639044, 0.1218432166639044, 0.6344703500082868),
                      Point(0.1218432166639044, 0.6344703500082868, 0.1218432166639044),
                      Point(0.0023825066607383, 0.3325391644464206, 0.3325391644464206),
                      Point(0.3325391644464206, 0.3325391644464206, 0.3325391644464206),
                      Point(0.3325391644464206, 0.3325391644464206, 0.0023825066607383),
                      Point(0.3325391644464206, 0.0023825066607383, 0.3325391644464206),
                      Point(0.0000000000000000, 0.5000000000000000, 0.5000000000000000),
                      Point(0.5000000000000000, 0.0000000000000000, 0.5000000000000000),
                      Point(0.5000000000000000, 0.5000000000000000, 0.0000000000000000),
                      Point(0.5000000000000000, 0.0000000000000000, 0.0000000000000000),
                      Point(0.0000000000000000, 0.5000000000000000, 0.0000000000000000),
                      Point(0.0000000000000000, 0.0000000000000000, 0.5000000000000000),
                      Point(0.2000000000000000, 0.1000000000000000, 0.1000000000000000),
                      Point(0.1000000000000000, 0.2000000000000000, 0.1000000000000000),
                      Point(0.1000000000000000, 0.1000000000000000, 0.2000000000000000),
                      Point(0.6000000000000000, 0.1000000000000000, 0.1000000000000000),
                      Point(0.1000000000000000, 0.6000000000000000, 0.1000000000000000),
                      Point(0.1000000000000000, 0.1000000000000000, 0.6000000000000000),
                      Point(0.1000000000000000, 0.2000000000000000, 0.6000000000000000),
                      Point(0.2000000000000000, 0.6000000000000000, 0.1000000000000000),
                      Point(0.6000000000000000, 0.1000000000000000, 0.2000000000000000),
                      Point(0.1000000000000000, 0.6000000000000000, 0.2000000000000000),
                      Point(0.2000000000000000, 0.1000000000000000, 0.6000000000000000),
                      Point(0.6000000000000000, 0.2000000000000000, 0.1000000000000000) };
    double wts[31] = {    0.1095853407966528, 0.0635996491464850, 0.0635996491464850,
                          0.0635996491464850, 0.0635996491464850,-0.3751064406859797,
                         -0.3751064406859797,-0.3751064406859797,-0.3751064406859797,
                          0.0293485515784412, 0.0293485515784412, 0.0293485515784412,
                          0.0293485515784412, 0.0058201058201058, 0.0058201058201058,
                          0.0058201058201058, 0.0058201058201058, 0.0058201058201058,
                          0.0058201058201058, 0.1653439153439105, 0.1653439153439105,
                          0.1653439153439105, 0.1653439153439105, 0.1653439153439105,
                          0.1653439153439105, 0.1653439153439105, 0.1653439153439105,
                          0.1653439153439105, 0.1653439153439105, 0.1653439153439105,
                          0.1653439153439105 };
  } keast8;

  static struct {
    const int num = 45;
    const int dop = 8;
    Point pts[45] = { Point(0.2500000000000000, 0.2500000000000000, 0.2500000000000000),
                      Point(0.6175871903000830, 0.1274709365666390, 0.1274709365666390),
                      Point(0.1274709365666390, 0.1274709365666390, 0.1274709365666390),
                      Point(0.1274709365666390, 0.1274709365666390, 0.6175871903000830),
                      Point(0.1274709365666390, 0.6175871903000830, 0.1274709365666390),
                      Point(0.9037635088221031, 0.0320788303926323, 0.0320788303926323),
                      Point(0.0320788303926323, 0.0320788303926323, 0.0320788303926323),
                      Point(0.0320788303926323, 0.0320788303926323, 0.9037635088221031),
                      Point(0.0320788303926323, 0.9037635088221031, 0.0320788303926323),
                      Point(0.4502229043567190, 0.0497770956432810, 0.0497770956432810),
                      Point(0.0497770956432810, 0.4502229043567190, 0.0497770956432810),
                      Point(0.0497770956432810, 0.0497770956432810, 0.4502229043567190),
                      Point(0.0497770956432810, 0.4502229043567190, 0.4502229043567190),
                      Point(0.4502229043567190, 0.0497770956432810, 0.4502229043567190),
                      Point(0.4502229043567190, 0.4502229043567190, 0.0497770956432810),
                      Point(0.3162695526014501, 0.1837304473985499, 0.1837304473985499),
                      Point(0.1837304473985499, 0.3162695526014501, 0.1837304473985499),
                      Point(0.1837304473985499, 0.1837304473985499, 0.3162695526014501),
                      Point(0.1837304473985499, 0.3162695526014501, 0.3162695526014501),
                      Point(0.3162695526014501, 0.1837304473985499, 0.3162695526014501),
                      Point(0.3162695526014501, 0.3162695526014501, 0.1837304473985499),
                      Point(0.0229177878448171, 0.2319010893971509, 0.2319010893971509),
                      Point(0.2319010893971509, 0.0229177878448171, 0.2319010893971509),
                      Point(0.2319010893971509, 0.2319010893971509, 0.0229177878448171),
                      Point(0.5132800333608811, 0.2319010893971509, 0.2319010893971509),
                      Point(0.2319010893971509, 0.5132800333608811, 0.2319010893971509),
                      Point(0.2319010893971509, 0.2319010893971509, 0.5132800333608811),
                      Point(0.2319010893971509, 0.0229177878448171, 0.5132800333608811),
                      Point(0.0229177878448171, 0.5132800333608811, 0.2319010893971509),
                      Point(0.5132800333608811, 0.2319010893971509, 0.0229177878448171),
                      Point(0.2319010893971509, 0.5132800333608811, 0.0229177878448171),
                      Point(0.0229177878448171, 0.2319010893971509, 0.5132800333608811),
                      Point(0.5132800333608811, 0.0229177878448171, 0.2319010893971509),
                      Point(0.7303134278075384, 0.0379700484718286, 0.0379700484718286),
                      Point(0.0379700484718286, 0.7303134278075384, 0.0379700484718286),
                      Point(0.0379700484718286, 0.0379700484718286, 0.7303134278075384),
                      Point(0.1937464752488044, 0.0379700484718286, 0.0379700484718286),
                      Point(0.0379700484718286, 0.1937464752488044, 0.0379700484718286),
                      Point(0.0379700484718286, 0.0379700484718286, 0.1937464752488044),
                      Point(0.0379700484718286, 0.7303134278075384, 0.1937464752488044),
                      Point(0.7303134278075384, 0.1937464752488044, 0.0379700484718286),
                      Point(0.1937464752488044, 0.0379700484718286, 0.7303134278075384),
                      Point(0.0379700484718286, 0.1937464752488044, 0.7303134278075384),
                      Point(0.7303134278075384, 0.0379700484718286, 0.1937464752488044),
                      Point(0.1937464752488044, 0.7303134278075384, 0.0379700484718286) };
    double wts[45] = {   -0.2359620398477557, 0.0244878963560562, 0.0244878963560562,
                          0.0244878963560562, 0.0244878963560562, 0.0039485206398261,
                          0.0039485206398261, 0.0039485206398261, 0.0039485206398261,
                          0.0263055529507371, 0.0263055529507371, 0.0263055529507371,
                          0.0263055529507371, 0.0263055529507371, 0.0263055529507371,
                          0.0829803830550589, 0.0829803830550589, 0.0829803830550589,
                          0.0829803830550589, 0.0829803830550589, 0.0829803830550589,
                          0.0254426245481023, 0.0254426245481023, 0.0254426245481023,
                          0.0254426245481023, 0.0254426245481023, 0.0254426245481023,
                          0.0254426245481023, 0.0254426245481023, 0.0254426245481023,
                          0.0254426245481023, 0.0254426245481023, 0.0254426245481023,
                          0.0134324384376852, 0.0134324384376852, 0.0134324384376852,
                          0.0134324384376852, 0.0134324384376852, 0.0134324384376852,
                          0.0134324384376852, 0.0134324384376852, 0.0134324384376852,
                          0.0134324384376852, 0.0134324384376852, 0.0134324384376852 };
  } keast9;

  class RuleForTetra {
  public:
    int num;
    int dop;
    Point* pts;
    double* wts;

    RuleForTetra(int num_in, int dop_in, Point* pts_in, double* wts_in) :
      num(num_in), dop(dop_in), pts(pts_in), wts(wts_in) {};
  };

  static const std::vector<RuleForTetra> ruleForTetra
    = { RuleForTetra(keast1.num,keast1.dop,keast1.pts,keast1.wts),
        RuleForTetra(keast2.num,keast2.dop,keast2.pts,keast2.wts),
        RuleForTetra(keast4.num,keast4.dop,keast4.pts,keast4.wts),
        RuleForTetra(keast6.num,keast6.dop,keast6.pts,keast6.wts),
        RuleForTetra(keast7.num,keast7.dop,keast7.pts,keast7.wts),
        RuleForTetra(keast8.num,keast8.dop,keast8.pts,keast8.wts),
        RuleForTetra(keast9.num,keast9.dop,keast9.pts,keast9.wts) };

  class Quadrature
  {
  private:
    hexamesh::Element* my_element = nullptr;

    int my_desired_dop; // desired degree of precision
    int my_dop; // actual degree of precision
    int my_refinement_level;
    int my_rule;

    // Reference tetrahedron (refined)
    int num_pts_ref;
    Point* my_pts_ref = nullptr;
    double* my_wts_ref = nullptr;

    // Hexahedron
    int num_pts;
    Point* my_pts = nullptr;
    double* my_wts = nullptr;

    void set_rule(int desired_dop);
    void set_element(int supplement_type, int refinement_level, hexamesh::Element* element);
    std::vector<std::vector<Point>> refine(int level, std::vector<std::vector<hexamesh::Vertex*>> vertices); 
  
    public:
    Quadrature(int desired_dop=2, int supplement_type=0, int refinement_level = 0, hexamesh::Element* element=nullptr) {
      set_rule(desired_dop); set_element(supplement_type, refinement_level, element); };
    ~Quadrature();

    void set(int desired_dop=2, int supplement_type=0, int refinement_level = 0, hexamesh::Element* element=nullptr) {
      set_rule(desired_dop); set_element(supplement_type, refinement_level, element); };
    void setRule(int desired_dop) { set_rule(desired_dop); };
    void setElement(int supplement_type=0, int refinement_level = 0, hexamesh::Element* element = nullptr) { set_element(supplement_type, refinement_level, element); };

    hexamesh::Element* elementPtr() const { return my_element; };
    int quadratureRule() const { return my_rule; };

    int num() const { return num_pts; };
    Point& pt(int i) const { return my_pts[i]; };
    double wt(int i) const { return my_wts[i]; };
    Point* pts() const { return my_pts; };
    double* wts() const { return my_wts; };

    int desiredDOP() const { return my_desired_dop; };
    int dop() const { return my_dop; };
    bool isDesiredDOP() { return my_desired_dop == my_dop; };
    bool isAtLeastDesiredDOP() { return my_desired_dop <= my_dop; };
  };

  void testQuadrature(hexamesh::HexaMesh* mesh, int supplement_type, int refinement_level, double eps=1e-8,
			                int toDOP=ruleForTetra[ruleForTetra.size()-1].dop);
}

#endif